{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils.js');\n\nvar React = global.React || require('react');\n\nvar convertValidationsToObject = function convertValidationsToObject(validations) {\n  if (typeof validations === 'string') {\n    return validations.split(/\\,(?![^{\\[]*[}\\]])/g).reduce(function (validations, validation) {\n      var args = validation.split(':');\n      var validateMethod = args.shift();\n      args = args.map(function (arg) {\n        try {\n          return JSON.parse(arg);\n        } catch (e) {\n          return arg; // It is a string if it can not parse it\n        }\n      });\n\n      if (args.length > 1) {\n        throw new Error('Formsy does not support multiple args on string validations. Use object format of validations instead.');\n      }\n\n      validations[validateMethod] = args.length ? args[0] : true;\n      return validations;\n    }, {});\n  }\n\n  return validations || {};\n};\n\nmodule.exports = {\n  getInitialState: function getInitialState() {\n    return {\n      _value: this.props.value,\n      _isRequired: false,\n      _isValid: true,\n      _isPristine: true,\n      _pristineValue: this.props.value,\n      _validationError: [],\n      _externalError: null,\n      _formSubmitted: false\n    };\n  },\n  contextTypes: {\n    formsy: React.PropTypes.object // What about required?\n\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      validationError: '',\n      validationErrors: {}\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    var configure = function () {\n      this.setValidations(this.props.validations, this.props.required); // Pass a function instead?\n\n      this.context.formsy.attachToForm(this); //this.props._attachToForm(this);\n    }.bind(this);\n\n    if (!this.props.name) {\n      throw new Error('Form Input requires a name property when used');\n    }\n    /*\r\n    if (!this.props._attachToForm) {\r\n      return setTimeout(function () {\r\n        if (!this.isMounted()) return;\r\n        if (!this.props._attachToForm) {\r\n          throw new Error('Form Mixin requires component to be nested in a Form');\r\n        }\r\n        configure();\r\n      }.bind(this), 0);\r\n    }\r\n    */\n\n\n    configure();\n  },\n  // We have to make the validate method is kept when new props are added\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    this.setValidations(nextProps.validations, nextProps.required);\n  },\n  componentDidUpdate: function componentDidUpdate(prevProps) {\n    // If the value passed has changed, set it. If value is not passed it will\n    // internally update, and this will never run\n    if (!utils.isSame(this.props.value, prevProps.value)) {\n      this.setValue(this.props.value);\n    } // If validations or required is changed, run a new validation\n\n\n    if (!utils.isSame(this.props.validations, prevProps.validations) || !utils.isSame(this.props.required, prevProps.required)) {\n      this.context.formsy.validate(this);\n    }\n  },\n  // Detach it when component unmounts\n  componentWillUnmount: function componentWillUnmount() {\n    this.context.formsy.detachFromForm(this); //this.props._detachFromForm(this);\n  },\n  setValidations: function setValidations(validations, required) {\n    // Add validations to the store itself as the props object can not be modified\n    this._validations = convertValidationsToObject(validations) || {};\n    this._requiredValidations = required === true ? {\n      isDefaultRequiredValue: true\n    } : convertValidationsToObject(required);\n  },\n  // We validate after the value has been set\n  setValue: function setValue(value) {\n    this.setState({\n      _value: value,\n      _isPristine: false\n    }, function () {\n      this.context.formsy.validate(this); //this.props._validate(this);\n    }.bind(this));\n  },\n  resetValue: function resetValue() {\n    this.setState({\n      _value: this.state._pristineValue,\n      _isPristine: true\n    }, function () {\n      this.context.formsy.validate(this); //this.props._validate(this);\n    });\n  },\n  getValue: function getValue() {\n    return this.state._value;\n  },\n  hasValue: function hasValue() {\n    return this.state._value !== '';\n  },\n  getErrorMessage: function getErrorMessage() {\n    var messages = this.getErrorMessages();\n    return messages.length ? messages[0] : null;\n  },\n  getErrorMessages: function getErrorMessages() {\n    return !this.isValid() || this.showRequired() ? this.state._externalError || this.state._validationError || [] : [];\n  },\n  isFormDisabled: function isFormDisabled() {\n    return this.context.formsy.isFormDisabled(); //return this.props._isFormDisabled();\n  },\n  isValid: function isValid() {\n    return this.state._isValid;\n  },\n  isPristine: function isPristine() {\n    return this.state._isPristine;\n  },\n  isFormSubmitted: function isFormSubmitted() {\n    return this.state._formSubmitted;\n  },\n  isRequired: function isRequired() {\n    return !!this.props.required;\n  },\n  showRequired: function showRequired() {\n    return this.state._isRequired;\n  },\n  showError: function showError() {\n    return !this.showRequired() && !this.isValid();\n  },\n  isValidValue: function isValidValue(value) {\n    return this.context.formsy.isValidValue.call(null, this, value); //return this.props._isValidValue.call(null, this, value);\n  }\n};","map":{"version":3,"sources":["/Users/vladimir/Desktop/Projects/Ecommerce/e-shop/node_modules/formsy-react/lib/Mixin.js"],"names":["utils","require","React","global","convertValidationsToObject","validations","split","reduce","validation","args","validateMethod","shift","map","arg","JSON","parse","e","length","Error","module","exports","getInitialState","_value","props","value","_isRequired","_isValid","_isPristine","_pristineValue","_validationError","_externalError","_formSubmitted","contextTypes","formsy","PropTypes","object","getDefaultProps","validationError","validationErrors","componentWillMount","configure","setValidations","required","context","attachToForm","bind","name","componentWillReceiveProps","nextProps","componentDidUpdate","prevProps","isSame","setValue","validate","componentWillUnmount","detachFromForm","_validations","_requiredValidations","isDefaultRequiredValue","setState","resetValue","state","getValue","hasValue","getErrorMessage","messages","getErrorMessages","isValid","showRequired","isFormDisabled","isPristine","isFormSubmitted","isRequired","showError","isValidValue","call"],"mappings":"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","sourcesContent":["'use strict';\n\nvar utils = require('./utils.js');\nvar React = global.React || require('react');\n\nvar convertValidationsToObject = function convertValidationsToObject(validations) {\n\n  if (typeof validations === 'string') {\n\n    return validations.split(/\\,(?![^{\\[]*[}\\]])/g).reduce(function (validations, validation) {\n      var args = validation.split(':');\n      var validateMethod = args.shift();\n\n      args = args.map(function (arg) {\n        try {\n          return JSON.parse(arg);\n        } catch (e) {\n          return arg; // It is a string if it can not parse it\n        }\n      });\n\n      if (args.length > 1) {\n        throw new Error('Formsy does not support multiple args on string validations. Use object format of validations instead.');\n      }\n\n      validations[validateMethod] = args.length ? args[0] : true;\n      return validations;\n    }, {});\n  }\n\n  return validations || {};\n};\n\nmodule.exports = {\n  getInitialState: function getInitialState() {\n    return {\n      _value: this.props.value,\n      _isRequired: false,\n      _isValid: true,\n      _isPristine: true,\n      _pristineValue: this.props.value,\n      _validationError: [],\n      _externalError: null,\n      _formSubmitted: false\n    };\n  },\n  contextTypes: {\n    formsy: React.PropTypes.object // What about required?\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      validationError: '',\n      validationErrors: {}\n    };\n  },\n\n  componentWillMount: function componentWillMount() {\n    var configure = function () {\n      this.setValidations(this.props.validations, this.props.required);\n\n      // Pass a function instead?\n      this.context.formsy.attachToForm(this);\n      //this.props._attachToForm(this);\n    }.bind(this);\n\n    if (!this.props.name) {\n      throw new Error('Form Input requires a name property when used');\n    }\n\n    /*\r\n    if (!this.props._attachToForm) {\r\n      return setTimeout(function () {\r\n        if (!this.isMounted()) return;\r\n        if (!this.props._attachToForm) {\r\n          throw new Error('Form Mixin requires component to be nested in a Form');\r\n        }\r\n        configure();\r\n      }.bind(this), 0);\r\n    }\r\n    */\n    configure();\n  },\n\n  // We have to make the validate method is kept when new props are added\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    this.setValidations(nextProps.validations, nextProps.required);\n  },\n\n  componentDidUpdate: function componentDidUpdate(prevProps) {\n\n    // If the value passed has changed, set it. If value is not passed it will\n    // internally update, and this will never run\n    if (!utils.isSame(this.props.value, prevProps.value)) {\n      this.setValue(this.props.value);\n    }\n\n    // If validations or required is changed, run a new validation\n    if (!utils.isSame(this.props.validations, prevProps.validations) || !utils.isSame(this.props.required, prevProps.required)) {\n      this.context.formsy.validate(this);\n    }\n  },\n\n  // Detach it when component unmounts\n  componentWillUnmount: function componentWillUnmount() {\n    this.context.formsy.detachFromForm(this);\n    //this.props._detachFromForm(this);\n  },\n\n  setValidations: function setValidations(validations, required) {\n\n    // Add validations to the store itself as the props object can not be modified\n    this._validations = convertValidationsToObject(validations) || {};\n    this._requiredValidations = required === true ? { isDefaultRequiredValue: true } : convertValidationsToObject(required);\n  },\n\n  // We validate after the value has been set\n  setValue: function setValue(value) {\n    this.setState({\n      _value: value,\n      _isPristine: false\n    }, function () {\n      this.context.formsy.validate(this);\n      //this.props._validate(this);\n    }.bind(this));\n  },\n  resetValue: function resetValue() {\n    this.setState({\n      _value: this.state._pristineValue,\n      _isPristine: true\n    }, function () {\n      this.context.formsy.validate(this);\n      //this.props._validate(this);\n    });\n  },\n  getValue: function getValue() {\n    return this.state._value;\n  },\n  hasValue: function hasValue() {\n    return this.state._value !== '';\n  },\n  getErrorMessage: function getErrorMessage() {\n    var messages = this.getErrorMessages();\n    return messages.length ? messages[0] : null;\n  },\n  getErrorMessages: function getErrorMessages() {\n    return !this.isValid() || this.showRequired() ? this.state._externalError || this.state._validationError || [] : [];\n  },\n  isFormDisabled: function isFormDisabled() {\n    return this.context.formsy.isFormDisabled();\n    //return this.props._isFormDisabled();\n  },\n  isValid: function isValid() {\n    return this.state._isValid;\n  },\n  isPristine: function isPristine() {\n    return this.state._isPristine;\n  },\n  isFormSubmitted: function isFormSubmitted() {\n    return this.state._formSubmitted;\n  },\n  isRequired: function isRequired() {\n    return !!this.props.required;\n  },\n  showRequired: function showRequired() {\n    return this.state._isRequired;\n  },\n  showError: function showError() {\n    return !this.showRequired() && !this.isValid();\n  },\n  isValidValue: function isValidValue(value) {\n    return this.context.formsy.isValidValue.call(null, this, value);\n    //return this.props._isValidValue.call(null, this, value);\n  }\n};"]},"metadata":{},"sourceType":"script"}