{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar React = global.React || require('react');\n\nvar Formsy = {};\n\nvar validationRules = require('./validationRules.js');\n\nvar formDataToObject = require('form-data-to-object');\n\nvar utils = require('./utils.js');\n\nvar Mixin = require('./Mixin.js');\n\nvar HOC = require('./HOC.js');\n\nvar Decorator = require('./Decorator.js');\n\nvar options = {};\nvar emptyArray = [];\nFormsy.Mixin = Mixin;\nFormsy.HOC = HOC;\nFormsy.Decorator = Decorator;\n\nFormsy.defaults = function (passedOptions) {\n  options = passedOptions;\n};\n\nFormsy.addValidationRule = function (name, func) {\n  validationRules[name] = func;\n};\n\nFormsy.Form = React.createClass({\n  displayName: 'Formsy',\n  getInitialState: function getInitialState() {\n    return {\n      isValid: true,\n      isSubmitting: false,\n      canChange: false\n    };\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      onSuccess: function onSuccess() {},\n      onError: function onError() {},\n      onSubmit: function onSubmit() {},\n      onValidSubmit: function onValidSubmit() {},\n      onInvalidSubmit: function onInvalidSubmit() {},\n      onValid: function onValid() {},\n      onInvalid: function onInvalid() {},\n      onChange: function onChange() {},\n      validationErrors: null,\n      preventExternalInvalidation: false\n    };\n  },\n  childContextTypes: {\n    formsy: React.PropTypes.object\n  },\n  getChildContext: function getChildContext() {\n    var _this = this;\n\n    return {\n      formsy: {\n        attachToForm: this.attachToForm,\n        detachFromForm: this.detachFromForm,\n        validate: this.validate,\n        isFormDisabled: this.isFormDisabled,\n        isValidValue: function isValidValue(component, value) {\n          return _this.runValidation(component, value).isValid;\n        }\n      }\n    };\n  },\n  // Add a map to store the inputs of the form, a model to store\n  // the values of the form and register child inputs\n  componentWillMount: function componentWillMount() {\n    this.inputs = [];\n  },\n  componentDidMount: function componentDidMount() {\n    this.validateForm();\n  },\n  componentWillUpdate: function componentWillUpdate() {\n    // Keep a reference to input names before form updates,\n    // to check if inputs has changed after render\n    this.prevInputNames = this.inputs.map(function (component) {\n      return component.props.name;\n    });\n  },\n  componentDidUpdate: function componentDidUpdate() {\n    if (this.props.validationErrors && _typeof(this.props.validationErrors) === 'object' && Object.keys(this.props.validationErrors).length > 0) {\n      this.setInputValidationErrors(this.props.validationErrors);\n    }\n\n    var newInputNames = this.inputs.map(function (component) {\n      return component.props.name;\n    });\n\n    if (utils.arraysDiffer(this.prevInputNames, newInputNames)) {\n      this.validateForm();\n    }\n  },\n  // Allow resetting to specified data\n  reset: function reset(data) {\n    this.setFormPristine(true);\n    this.resetModel(data);\n  },\n  // Update model, submit to url prop and send the model\n  submit: function submit(event) {\n    event && event.preventDefault(); // Trigger form as not pristine.\n    // If any inputs have not been touched yet this will make them dirty\n    // so validation becomes visible (if based on isPristine)\n\n    this.setFormPristine(false);\n    var model = this.getModel();\n    this.props.onSubmit(model, this.resetModel, this.updateInputsWithError);\n    this.state.isValid ? this.props.onValidSubmit(model, this.resetModel, this.updateInputsWithError) : this.props.onInvalidSubmit(model, this.resetModel, this.updateInputsWithError);\n  },\n  mapModel: function mapModel(model) {\n    if (this.props.mapping) {\n      return this.props.mapping(model);\n    } else {\n      return formDataToObject.toObj(Object.keys(model).reduce(function (mappedModel, key) {\n        var keyArray = key.split('.');\n        var base = mappedModel;\n\n        while (keyArray.length) {\n          var currentKey = keyArray.shift();\n          base = base[currentKey] = keyArray.length ? base[currentKey] || {} : model[key];\n        }\n\n        return mappedModel;\n      }, {}));\n    }\n  },\n  getModel: function getModel() {\n    var currentValues = this.getCurrentValues();\n    return this.mapModel(currentValues);\n  },\n  // Reset each key in the model to the original / initial / specified value\n  resetModel: function resetModel(data) {\n    this.inputs.forEach(function (component) {\n      var name = component.props.name;\n\n      if (data && data.hasOwnProperty(name)) {\n        component.setValue(data[name]);\n      } else {\n        component.resetValue();\n      }\n    });\n    this.validateForm();\n  },\n  setInputValidationErrors: function setInputValidationErrors(errors) {\n    this.inputs.forEach(function (component) {\n      var name = component.props.name;\n      var args = [{\n        _isValid: !(name in errors),\n        _validationError: typeof errors[name] === 'string' ? [errors[name]] : errors[name]\n      }];\n      component.setState.apply(component, args);\n    });\n  },\n  // Checks if the values have changed from their initial value\n  isChanged: function isChanged() {\n    return !utils.isSame(this.getPristineValues(), this.getCurrentValues());\n  },\n  getPristineValues: function getPristineValues() {\n    return this.inputs.reduce(function (data, component) {\n      var name = component.props.name;\n      data[name] = component.props.value;\n      return data;\n    }, {});\n  },\n  // Go through errors from server and grab the components\n  // stored in the inputs map. Change their state to invalid\n  // and set the serverError message\n  updateInputsWithError: function updateInputsWithError(errors) {\n    var _this2 = this;\n\n    Object.keys(errors).forEach(function (name, index) {\n      var component = utils.find(_this2.inputs, function (component) {\n        return component.props.name === name;\n      });\n\n      if (!component) {\n        throw new Error('You are trying to update an input that does not exist. ' + 'Verify errors object with input names. ' + JSON.stringify(errors));\n      }\n\n      var args = [{\n        _isValid: _this2.props.preventExternalInvalidation || false,\n        _externalError: typeof errors[name] === 'string' ? [errors[name]] : errors[name]\n      }];\n      component.setState.apply(component, args);\n    });\n  },\n  isFormDisabled: function isFormDisabled() {\n    return this.props.disabled;\n  },\n  getCurrentValues: function getCurrentValues() {\n    return this.inputs.reduce(function (data, component) {\n      var name = component.props.name;\n      data[name] = component.state._value;\n      return data;\n    }, {});\n  },\n  setFormPristine: function setFormPristine(isPristine) {\n    this.setState({\n      _formSubmitted: !isPristine\n    }); // Iterate through each component and set it as pristine\n    // or \"dirty\".\n\n    this.inputs.forEach(function (component, index) {\n      component.setState({\n        _formSubmitted: !isPristine,\n        _isPristine: isPristine\n      });\n    });\n  },\n  // Use the binded values and the actual input value to\n  // validate the input and set its state. Then check the\n  // state of the form itself\n  validate: function validate(component) {\n    // Trigger onChange\n    if (this.state.canChange) {\n      this.props.onChange(this.getCurrentValues(), this.isChanged());\n    }\n\n    var validation = this.runValidation(component); // Run through the validations, split them up and call\n    // the validator IF there is a value or it is required\n\n    component.setState({\n      _isValid: validation.isValid,\n      _isRequired: validation.isRequired,\n      _validationError: validation.error,\n      _externalError: null\n    }, this.validateForm);\n  },\n  // Checks validation on current value or a passed value\n  runValidation: function runValidation(component, value) {\n    var currentValues = this.getCurrentValues();\n    var validationErrors = component.props.validationErrors;\n    var validationError = component.props.validationError;\n    value = arguments.length === 2 ? value : component.state._value;\n    var validationResults = this.runRules(value, currentValues, component._validations);\n    var requiredResults = this.runRules(value, currentValues, component._requiredValidations); // the component defines an explicit validate function\n\n    if (typeof component.validate === \"function\") {\n      validationResults.failed = component.validate() ? [] : ['failed'];\n    }\n\n    var isRequired = Object.keys(component._requiredValidations).length ? !!requiredResults.success.length : false;\n    var isValid = !validationResults.failed.length && !(this.props.validationErrors && this.props.validationErrors[component.props.name]);\n    return {\n      isRequired: isRequired,\n      isValid: isRequired ? false : isValid,\n      error: function () {\n        if (isValid && !isRequired) {\n          return emptyArray;\n        }\n\n        if (validationResults.errors.length) {\n          return validationResults.errors;\n        }\n\n        if (this.props.validationErrors && this.props.validationErrors[component.props.name]) {\n          return typeof this.props.validationErrors[component.props.name] === 'string' ? [this.props.validationErrors[component.props.name]] : this.props.validationErrors[component.props.name];\n        }\n\n        if (isRequired) {\n          var error = validationErrors[requiredResults.success[0]];\n          return error ? [error] : null;\n        }\n\n        if (validationResults.failed.length) {\n          return validationResults.failed.map(function (failed) {\n            return validationErrors[failed] ? validationErrors[failed] : validationError;\n          }).filter(function (x, pos, arr) {\n            // Remove duplicates\n            return arr.indexOf(x) === pos;\n          });\n        }\n      }.call(this)\n    };\n  },\n  runRules: function runRules(value, currentValues, validations) {\n    var results = {\n      errors: [],\n      failed: [],\n      success: []\n    };\n\n    if (Object.keys(validations).length) {\n      Object.keys(validations).forEach(function (validationMethod) {\n        if (validationRules[validationMethod] && typeof validations[validationMethod] === 'function') {\n          throw new Error('Formsy does not allow you to override default validations: ' + validationMethod);\n        }\n\n        if (!validationRules[validationMethod] && typeof validations[validationMethod] !== 'function') {\n          throw new Error('Formsy does not have the validation rule: ' + validationMethod);\n        }\n\n        if (typeof validations[validationMethod] === 'function') {\n          var validation = validations[validationMethod](currentValues, value);\n\n          if (typeof validation === 'string') {\n            results.errors.push(validation);\n            results.failed.push(validationMethod);\n          } else if (!validation) {\n            results.failed.push(validationMethod);\n          }\n\n          return;\n        } else if (typeof validations[validationMethod] !== 'function') {\n          var validation = validationRules[validationMethod](currentValues, value, validations[validationMethod]);\n\n          if (typeof validation === 'string') {\n            results.errors.push(validation);\n            results.failed.push(validationMethod);\n          } else if (!validation) {\n            results.failed.push(validationMethod);\n          } else {\n            results.success.push(validationMethod);\n          }\n\n          return;\n        }\n\n        return results.success.push(validationMethod);\n      });\n    }\n\n    return results;\n  },\n  // Validate the form by going through all child input components\n  // and check their state\n  validateForm: function validateForm() {\n    var _this3 = this; // We need a callback as we are validating all inputs again. This will\n    // run when the last component has set its state\n\n\n    var onValidationComplete = function () {\n      var allIsValid = this.inputs.every(function (component) {\n        return component.state._isValid;\n      });\n      this.setState({\n        isValid: allIsValid\n      });\n\n      if (allIsValid) {\n        this.props.onValid();\n      } else {\n        this.props.onInvalid();\n      } // Tell the form that it can start to trigger change events\n\n\n      this.setState({\n        canChange: true\n      });\n    }.bind(this); // Run validation again in case affected by other inputs. The\n    // last component validated will run the onValidationComplete callback\n\n\n    this.inputs.forEach(function (component, index) {\n      var validation = _this3.runValidation(component);\n\n      if (validation.isValid && component.state._externalError) {\n        validation.isValid = false;\n      }\n\n      component.setState({\n        _isValid: validation.isValid,\n        _isRequired: validation.isRequired,\n        _validationError: validation.error,\n        _externalError: !validation.isValid && component.state._externalError ? component.state._externalError : null\n      }, index === _this3.inputs.length - 1 ? onValidationComplete : null);\n    }); // If there are no inputs, set state where form is ready to trigger\n    // change event. New inputs might be added later\n\n    if (!this.inputs.length && this.isMounted()) {\n      this.setState({\n        canChange: true\n      });\n    }\n  },\n  // Method put on each input component to register\n  // itself to the form\n  attachToForm: function attachToForm(component) {\n    if (this.inputs.indexOf(component) === -1) {\n      this.inputs.push(component);\n    }\n\n    this.validate(component);\n  },\n  // Method put on each input component to unregister\n  // itself from the form\n  detachFromForm: function detachFromForm(component) {\n    var componentPos = this.inputs.indexOf(component);\n\n    if (componentPos !== -1) {\n      this.inputs = this.inputs.slice(0, componentPos).concat(this.inputs.slice(componentPos + 1));\n    }\n\n    this.validateForm();\n  },\n  render: function render() {\n    var _props = this.props;\n    var mapping = _props.mapping;\n    var validationErrors = _props.validationErrors;\n    var onSubmit = _props.onSubmit;\n    var onValid = _props.onValid;\n    var onValidSubmit = _props.onValidSubmit;\n    var onInvalid = _props.onInvalid;\n    var onInvalidSubmit = _props.onInvalidSubmit;\n    var onChange = _props.onChange;\n    var reset = _props.reset;\n    var preventExternalInvalidation = _props.preventExternalInvalidation;\n    var onSuccess = _props.onSuccess;\n    var onError = _props.onError;\n\n    var nonFormsyProps = _objectWithoutProperties(_props, ['mapping', 'validationErrors', 'onSubmit', 'onValid', 'onValidSubmit', 'onInvalid', 'onInvalidSubmit', 'onChange', 'reset', 'preventExternalInvalidation', 'onSuccess', 'onError']);\n\n    return React.createElement('form', _extends({}, nonFormsyProps, {\n      onSubmit: this.submit\n    }), this.props.children);\n  }\n});\n\nif (!global.exports && !global.module && (!global.define || !global.define.amd)) {\n  global.Formsy = Formsy;\n}\n\nmodule.exports = Formsy;","map":{"version":3,"sources":["/Users/vladimir/Desktop/Projects/Ecommerce/e-shop/node_modules/formsy-react/lib/main.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_typeof","Symbol","iterator","obj","constructor","_objectWithoutProperties","keys","indexOf","React","global","require","Formsy","validationRules","formDataToObject","utils","Mixin","HOC","Decorator","options","emptyArray","defaults","passedOptions","addValidationRule","name","func","Form","createClass","displayName","getInitialState","isValid","isSubmitting","canChange","getDefaultProps","onSuccess","onError","onSubmit","onValidSubmit","onInvalidSubmit","onValid","onInvalid","onChange","validationErrors","preventExternalInvalidation","childContextTypes","formsy","PropTypes","object","getChildContext","_this","attachToForm","detachFromForm","validate","isFormDisabled","isValidValue","component","value","runValidation","componentWillMount","inputs","componentDidMount","validateForm","componentWillUpdate","prevInputNames","map","props","componentDidUpdate","setInputValidationErrors","newInputNames","arraysDiffer","reset","data","setFormPristine","resetModel","submit","event","preventDefault","model","getModel","updateInputsWithError","state","mapModel","mapping","toObj","reduce","mappedModel","keyArray","split","base","currentKey","shift","currentValues","getCurrentValues","forEach","setValue","resetValue","errors","args","_isValid","_validationError","setState","apply","isChanged","isSame","getPristineValues","_this2","index","find","Error","JSON","stringify","_externalError","disabled","_value","isPristine","_formSubmitted","_isPristine","validation","_isRequired","isRequired","error","validationError","validationResults","runRules","_validations","requiredResults","_requiredValidations","failed","success","filter","x","pos","arr","validations","results","validationMethod","push","_this3","onValidationComplete","allIsValid","every","bind","isMounted","componentPos","slice","concat","render","_props","nonFormsyProps","createElement","children","exports","module","define","amd"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,SAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIN,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,QAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,SAAOL,MAAP;AAAgB,CAAhQ;;AAEA,IAAIS,OAAO,GAAG,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA3D,GAAsE,UAAUC,GAAV,EAAe;AAAE,SAAO,OAAOA,GAAd;AAAoB,CAA3G,GAA8G,UAAUA,GAAV,EAAe;AAAE,SAAOA,GAAG,IAAI,OAAOF,MAAP,KAAkB,UAAzB,IAAuCE,GAAG,CAACC,WAAJ,KAAoBH,MAA3D,GAAoE,QAApE,GAA+E,OAAOE,GAA7F;AAAmG,CAAhP;;AAEA,SAASE,wBAAT,CAAkCF,GAAlC,EAAuCG,IAAvC,EAA6C;AAAE,MAAIf,MAAM,GAAG,EAAb;;AAAiB,OAAK,IAAIC,CAAT,IAAcW,GAAd,EAAmB;AAAE,QAAIG,IAAI,CAACC,OAAL,CAAaf,CAAb,KAAmB,CAAvB,EAA0B;AAAU,QAAI,CAACH,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCI,GAArC,EAA0CX,CAA1C,CAAL,EAAmD;AAAUD,IAAAA,MAAM,CAACC,CAAD,CAAN,GAAYW,GAAG,CAACX,CAAD,CAAf;AAAqB;;AAAC,SAAOD,MAAP;AAAgB;;AAE5N,IAAIiB,KAAK,GAAGC,MAAM,CAACD,KAAP,IAAgBE,OAAO,CAAC,OAAD,CAAnC;;AACA,IAAIC,MAAM,GAAG,EAAb;;AACA,IAAIC,eAAe,GAAGF,OAAO,CAAC,sBAAD,CAA7B;;AACA,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,qBAAD,CAA9B;;AACA,IAAII,KAAK,GAAGJ,OAAO,CAAC,YAAD,CAAnB;;AACA,IAAIK,KAAK,GAAGL,OAAO,CAAC,YAAD,CAAnB;;AACA,IAAIM,GAAG,GAAGN,OAAO,CAAC,UAAD,CAAjB;;AACA,IAAIO,SAAS,GAAGP,OAAO,CAAC,gBAAD,CAAvB;;AACA,IAAIQ,OAAO,GAAG,EAAd;AACA,IAAIC,UAAU,GAAG,EAAjB;AAEAR,MAAM,CAACI,KAAP,GAAeA,KAAf;AACAJ,MAAM,CAACK,GAAP,GAAaA,GAAb;AACAL,MAAM,CAACM,SAAP,GAAmBA,SAAnB;;AAEAN,MAAM,CAACS,QAAP,GAAkB,UAAUC,aAAV,EAAyB;AACzCH,EAAAA,OAAO,GAAGG,aAAV;AACD,CAFD;;AAIAV,MAAM,CAACW,iBAAP,GAA2B,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AAC/CZ,EAAAA,eAAe,CAACW,IAAD,CAAf,GAAwBC,IAAxB;AACD,CAFD;;AAIAb,MAAM,CAACc,IAAP,GAAcjB,KAAK,CAACkB,WAAN,CAAkB;AAC9BC,EAAAA,WAAW,EAAE,QADiB;AAE9BC,EAAAA,eAAe,EAAE,SAASA,eAAT,GAA2B;AAC1C,WAAO;AACLC,MAAAA,OAAO,EAAE,IADJ;AAELC,MAAAA,YAAY,EAAE,KAFT;AAGLC,MAAAA,SAAS,EAAE;AAHN,KAAP;AAKD,GAR6B;AAS9BC,EAAAA,eAAe,EAAE,SAASA,eAAT,GAA2B;AAC1C,WAAO;AACLC,MAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB,CAAE,CAD7B;AAELC,MAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB,CAAE,CAFzB;AAGLC,MAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB,CAAE,CAH3B;AAILC,MAAAA,aAAa,EAAE,SAASA,aAAT,GAAyB,CAAE,CAJrC;AAKLC,MAAAA,eAAe,EAAE,SAASA,eAAT,GAA2B,CAAE,CALzC;AAMLC,MAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB,CAAE,CANzB;AAOLC,MAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB,CAAE,CAP7B;AAQLC,MAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB,CAAE,CAR3B;AASLC,MAAAA,gBAAgB,EAAE,IATb;AAULC,MAAAA,2BAA2B,EAAE;AAVxB,KAAP;AAYD,GAtB6B;AAwB9BC,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,MAAM,EAAEpC,KAAK,CAACqC,SAAN,CAAgBC;AADP,GAxBW;AA2B9BC,EAAAA,eAAe,EAAE,SAASA,eAAT,GAA2B;AAC1C,QAAIC,KAAK,GAAG,IAAZ;;AAEA,WAAO;AACLJ,MAAAA,MAAM,EAAE;AACNK,QAAAA,YAAY,EAAE,KAAKA,YADb;AAENC,QAAAA,cAAc,EAAE,KAAKA,cAFf;AAGNC,QAAAA,QAAQ,EAAE,KAAKA,QAHT;AAINC,QAAAA,cAAc,EAAE,KAAKA,cAJf;AAKNC,QAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBC,SAAtB,EAAiCC,KAAjC,EAAwC;AACpD,iBAAOP,KAAK,CAACQ,aAAN,CAAoBF,SAApB,EAA+BC,KAA/B,EAAsC1B,OAA7C;AACD;AAPK;AADH,KAAP;AAWD,GAzC6B;AA2C9B;AACA;AACA4B,EAAAA,kBAAkB,EAAE,SAASA,kBAAT,GAA8B;AAChD,SAAKC,MAAL,GAAc,EAAd;AACD,GA/C6B;AAiD9BC,EAAAA,iBAAiB,EAAE,SAASA,iBAAT,GAA6B;AAC9C,SAAKC,YAAL;AACD,GAnD6B;AAqD9BC,EAAAA,mBAAmB,EAAE,SAASA,mBAAT,GAA+B;AAClD;AACA;AACA,SAAKC,cAAL,GAAsB,KAAKJ,MAAL,CAAYK,GAAZ,CAAgB,UAAUT,SAAV,EAAqB;AACzD,aAAOA,SAAS,CAACU,KAAV,CAAgBzC,IAAvB;AACD,KAFqB,CAAtB;AAGD,GA3D6B;AA6D9B0C,EAAAA,kBAAkB,EAAE,SAASA,kBAAT,GAA8B;AAEhD,QAAI,KAAKD,KAAL,CAAWvB,gBAAX,IAA+BzC,OAAO,CAAC,KAAKgE,KAAL,CAAWvB,gBAAZ,CAAP,KAAyC,QAAxE,IAAoFpD,MAAM,CAACiB,IAAP,CAAY,KAAK0D,KAAL,CAAWvB,gBAAvB,EAAyC/C,MAAzC,GAAkD,CAA1I,EAA6I;AAC3I,WAAKwE,wBAAL,CAA8B,KAAKF,KAAL,CAAWvB,gBAAzC;AACD;;AAED,QAAI0B,aAAa,GAAG,KAAKT,MAAL,CAAYK,GAAZ,CAAgB,UAAUT,SAAV,EAAqB;AACvD,aAAOA,SAAS,CAACU,KAAV,CAAgBzC,IAAvB;AACD,KAFmB,CAApB;;AAGA,QAAIT,KAAK,CAACsD,YAAN,CAAmB,KAAKN,cAAxB,EAAwCK,aAAxC,CAAJ,EAA4D;AAC1D,WAAKP,YAAL;AACD;AACF,GAzE6B;AA2E9B;AACAS,EAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,IAAf,EAAqB;AAC1B,SAAKC,eAAL,CAAqB,IAArB;AACA,SAAKC,UAAL,CAAgBF,IAAhB;AACD,GA/E6B;AAiF9B;AACAG,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,KAAhB,EAAuB;AAE7BA,IAAAA,KAAK,IAAIA,KAAK,CAACC,cAAN,EAAT,CAF6B,CAI7B;AACA;AACA;;AACA,SAAKJ,eAAL,CAAqB,KAArB;AACA,QAAIK,KAAK,GAAG,KAAKC,QAAL,EAAZ;AACA,SAAKb,KAAL,CAAW7B,QAAX,CAAoByC,KAApB,EAA2B,KAAKJ,UAAhC,EAA4C,KAAKM,qBAAjD;AACA,SAAKC,KAAL,CAAWlD,OAAX,GAAqB,KAAKmC,KAAL,CAAW5B,aAAX,CAAyBwC,KAAzB,EAAgC,KAAKJ,UAArC,EAAiD,KAAKM,qBAAtD,CAArB,GAAoG,KAAKd,KAAL,CAAW3B,eAAX,CAA2BuC,KAA3B,EAAkC,KAAKJ,UAAvC,EAAmD,KAAKM,qBAAxD,CAApG;AACD,GA7F6B;AA+F9BE,EAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBJ,KAAlB,EAAyB;AAEjC,QAAI,KAAKZ,KAAL,CAAWiB,OAAf,EAAwB;AACtB,aAAO,KAAKjB,KAAL,CAAWiB,OAAX,CAAmBL,KAAnB,CAAP;AACD,KAFD,MAEO;AACL,aAAO/D,gBAAgB,CAACqE,KAAjB,CAAuB7F,MAAM,CAACiB,IAAP,CAAYsE,KAAZ,EAAmBO,MAAnB,CAA0B,UAAUC,WAAV,EAAuBxF,GAAvB,EAA4B;AAElF,YAAIyF,QAAQ,GAAGzF,GAAG,CAAC0F,KAAJ,CAAU,GAAV,CAAf;AACA,YAAIC,IAAI,GAAGH,WAAX;;AACA,eAAOC,QAAQ,CAAC3F,MAAhB,EAAwB;AACtB,cAAI8F,UAAU,GAAGH,QAAQ,CAACI,KAAT,EAAjB;AACAF,UAAAA,IAAI,GAAGA,IAAI,CAACC,UAAD,CAAJ,GAAmBH,QAAQ,CAAC3F,MAAT,GAAkB6F,IAAI,CAACC,UAAD,CAAJ,IAAoB,EAAtC,GAA2CZ,KAAK,CAAChF,GAAD,CAA1E;AACD;;AAED,eAAOwF,WAAP;AACD,OAV6B,EAU3B,EAV2B,CAAvB,CAAP;AAWD;AACF,GAhH6B;AAkH9BP,EAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B,QAAIa,aAAa,GAAG,KAAKC,gBAAL,EAApB;AACA,WAAO,KAAKX,QAAL,CAAcU,aAAd,CAAP;AACD,GArH6B;AAuH9B;AACAlB,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBF,IAApB,EAA0B;AACpC,SAAKZ,MAAL,CAAYkC,OAAZ,CAAoB,UAAUtC,SAAV,EAAqB;AACvC,UAAI/B,IAAI,GAAG+B,SAAS,CAACU,KAAV,CAAgBzC,IAA3B;;AACA,UAAI+C,IAAI,IAAIA,IAAI,CAACxE,cAAL,CAAoByB,IAApB,CAAZ,EAAuC;AACrC+B,QAAAA,SAAS,CAACuC,QAAV,CAAmBvB,IAAI,CAAC/C,IAAD,CAAvB;AACD,OAFD,MAEO;AACL+B,QAAAA,SAAS,CAACwC,UAAV;AACD;AACF,KAPD;AAQA,SAAKlC,YAAL;AACD,GAlI6B;AAoI9BM,EAAAA,wBAAwB,EAAE,SAASA,wBAAT,CAAkC6B,MAAlC,EAA0C;AAClE,SAAKrC,MAAL,CAAYkC,OAAZ,CAAoB,UAAUtC,SAAV,EAAqB;AACvC,UAAI/B,IAAI,GAAG+B,SAAS,CAACU,KAAV,CAAgBzC,IAA3B;AACA,UAAIyE,IAAI,GAAG,CAAC;AACVC,QAAAA,QAAQ,EAAE,EAAE1E,IAAI,IAAIwE,MAAV,CADA;AAEVG,QAAAA,gBAAgB,EAAE,OAAOH,MAAM,CAACxE,IAAD,CAAb,KAAwB,QAAxB,GAAmC,CAACwE,MAAM,CAACxE,IAAD,CAAP,CAAnC,GAAoDwE,MAAM,CAACxE,IAAD;AAFlE,OAAD,CAAX;AAIA+B,MAAAA,SAAS,CAAC6C,QAAV,CAAmBC,KAAnB,CAAyB9C,SAAzB,EAAoC0C,IAApC;AACD,KAPD;AAQD,GA7I6B;AA+I9B;AACAK,EAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB;AAC9B,WAAO,CAACvF,KAAK,CAACwF,MAAN,CAAa,KAAKC,iBAAL,EAAb,EAAuC,KAAKZ,gBAAL,EAAvC,CAAR;AACD,GAlJ6B;AAoJ9BY,EAAAA,iBAAiB,EAAE,SAASA,iBAAT,GAA6B;AAC9C,WAAO,KAAK7C,MAAL,CAAYyB,MAAZ,CAAmB,UAAUb,IAAV,EAAgBhB,SAAhB,EAA2B;AACnD,UAAI/B,IAAI,GAAG+B,SAAS,CAACU,KAAV,CAAgBzC,IAA3B;AACA+C,MAAAA,IAAI,CAAC/C,IAAD,CAAJ,GAAa+B,SAAS,CAACU,KAAV,CAAgBT,KAA7B;AACA,aAAOe,IAAP;AACD,KAJM,EAIJ,EAJI,CAAP;AAKD,GA1J6B;AA4J9B;AACA;AACA;AACAQ,EAAAA,qBAAqB,EAAE,SAASA,qBAAT,CAA+BiB,MAA/B,EAAuC;AAC5D,QAAIS,MAAM,GAAG,IAAb;;AAEAnH,IAAAA,MAAM,CAACiB,IAAP,CAAYyF,MAAZ,EAAoBH,OAApB,CAA4B,UAAUrE,IAAV,EAAgBkF,KAAhB,EAAuB;AACjD,UAAInD,SAAS,GAAGxC,KAAK,CAAC4F,IAAN,CAAWF,MAAM,CAAC9C,MAAlB,EAA0B,UAAUJ,SAAV,EAAqB;AAC7D,eAAOA,SAAS,CAACU,KAAV,CAAgBzC,IAAhB,KAAyBA,IAAhC;AACD,OAFe,CAAhB;;AAGA,UAAI,CAAC+B,SAAL,EAAgB;AACd,cAAM,IAAIqD,KAAJ,CAAU,4DAA4D,yCAA5D,GAAwGC,IAAI,CAACC,SAAL,CAAed,MAAf,CAAlH,CAAN;AACD;;AACD,UAAIC,IAAI,GAAG,CAAC;AACVC,QAAAA,QAAQ,EAAEO,MAAM,CAACxC,KAAP,CAAatB,2BAAb,IAA4C,KAD5C;AAEVoE,QAAAA,cAAc,EAAE,OAAOf,MAAM,CAACxE,IAAD,CAAb,KAAwB,QAAxB,GAAmC,CAACwE,MAAM,CAACxE,IAAD,CAAP,CAAnC,GAAoDwE,MAAM,CAACxE,IAAD;AAFhE,OAAD,CAAX;AAIA+B,MAAAA,SAAS,CAAC6C,QAAV,CAAmBC,KAAnB,CAAyB9C,SAAzB,EAAoC0C,IAApC;AACD,KAZD;AAaD,GA/K6B;AAiL9B5C,EAAAA,cAAc,EAAE,SAASA,cAAT,GAA0B;AACxC,WAAO,KAAKY,KAAL,CAAW+C,QAAlB;AACD,GAnL6B;AAqL9BpB,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,GAA4B;AAC5C,WAAO,KAAKjC,MAAL,CAAYyB,MAAZ,CAAmB,UAAUb,IAAV,EAAgBhB,SAAhB,EAA2B;AACnD,UAAI/B,IAAI,GAAG+B,SAAS,CAACU,KAAV,CAAgBzC,IAA3B;AACA+C,MAAAA,IAAI,CAAC/C,IAAD,CAAJ,GAAa+B,SAAS,CAACyB,KAAV,CAAgBiC,MAA7B;AACA,aAAO1C,IAAP;AACD,KAJM,EAIJ,EAJI,CAAP;AAKD,GA3L6B;AA6L9BC,EAAAA,eAAe,EAAE,SAASA,eAAT,CAAyB0C,UAAzB,EAAqC;AACpD,SAAKd,QAAL,CAAc;AACZe,MAAAA,cAAc,EAAE,CAACD;AADL,KAAd,EADoD,CAKpD;AACA;;AACA,SAAKvD,MAAL,CAAYkC,OAAZ,CAAoB,UAAUtC,SAAV,EAAqBmD,KAArB,EAA4B;AAC9CnD,MAAAA,SAAS,CAAC6C,QAAV,CAAmB;AACjBe,QAAAA,cAAc,EAAE,CAACD,UADA;AAEjBE,QAAAA,WAAW,EAAEF;AAFI,OAAnB;AAID,KALD;AAMD,GA1M6B;AA4M9B;AACA;AACA;AACA9D,EAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBG,SAAlB,EAA6B;AAErC;AACA,QAAI,KAAKyB,KAAL,CAAWhD,SAAf,EAA0B;AACxB,WAAKiC,KAAL,CAAWxB,QAAX,CAAoB,KAAKmD,gBAAL,EAApB,EAA6C,KAAKU,SAAL,EAA7C;AACD;;AAED,QAAIe,UAAU,GAAG,KAAK5D,aAAL,CAAmBF,SAAnB,CAAjB,CAPqC,CAQrC;AACA;;AACAA,IAAAA,SAAS,CAAC6C,QAAV,CAAmB;AACjBF,MAAAA,QAAQ,EAAEmB,UAAU,CAACvF,OADJ;AAEjBwF,MAAAA,WAAW,EAAED,UAAU,CAACE,UAFP;AAGjBpB,MAAAA,gBAAgB,EAAEkB,UAAU,CAACG,KAHZ;AAIjBT,MAAAA,cAAc,EAAE;AAJC,KAAnB,EAKG,KAAKlD,YALR;AAMD,GA/N6B;AAiO9B;AACAJ,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBF,SAAvB,EAAkCC,KAAlC,EAAyC;AAEtD,QAAImC,aAAa,GAAG,KAAKC,gBAAL,EAApB;AACA,QAAIlD,gBAAgB,GAAGa,SAAS,CAACU,KAAV,CAAgBvB,gBAAvC;AACA,QAAI+E,eAAe,GAAGlE,SAAS,CAACU,KAAV,CAAgBwD,eAAtC;AACAjE,IAAAA,KAAK,GAAG9D,SAAS,CAACC,MAAV,KAAqB,CAArB,GAAyB6D,KAAzB,GAAiCD,SAAS,CAACyB,KAAV,CAAgBiC,MAAzD;AAEA,QAAIS,iBAAiB,GAAG,KAAKC,QAAL,CAAcnE,KAAd,EAAqBmC,aAArB,EAAoCpC,SAAS,CAACqE,YAA9C,CAAxB;AACA,QAAIC,eAAe,GAAG,KAAKF,QAAL,CAAcnE,KAAd,EAAqBmC,aAArB,EAAoCpC,SAAS,CAACuE,oBAA9C,CAAtB,CARsD,CAUtD;;AACA,QAAI,OAAOvE,SAAS,CAACH,QAAjB,KAA8B,UAAlC,EAA8C;AAC5CsE,MAAAA,iBAAiB,CAACK,MAAlB,GAA2BxE,SAAS,CAACH,QAAV,KAAuB,EAAvB,GAA4B,CAAC,QAAD,CAAvD;AACD;;AAED,QAAImE,UAAU,GAAGjI,MAAM,CAACiB,IAAP,CAAYgD,SAAS,CAACuE,oBAAtB,EAA4CnI,MAA5C,GAAqD,CAAC,CAACkI,eAAe,CAACG,OAAhB,CAAwBrI,MAA/E,GAAwF,KAAzG;AACA,QAAImC,OAAO,GAAG,CAAC4F,iBAAiB,CAACK,MAAlB,CAAyBpI,MAA1B,IAAoC,EAAE,KAAKsE,KAAL,CAAWvB,gBAAX,IAA+B,KAAKuB,KAAL,CAAWvB,gBAAX,CAA4Ba,SAAS,CAACU,KAAV,CAAgBzC,IAA5C,CAAjC,CAAlD;AAEA,WAAO;AACL+F,MAAAA,UAAU,EAAEA,UADP;AAELzF,MAAAA,OAAO,EAAEyF,UAAU,GAAG,KAAH,GAAWzF,OAFzB;AAGL0F,MAAAA,KAAK,EAAE,YAAY;AAEjB,YAAI1F,OAAO,IAAI,CAACyF,UAAhB,EAA4B;AAC1B,iBAAOnG,UAAP;AACD;;AAED,YAAIsG,iBAAiB,CAAC1B,MAAlB,CAAyBrG,MAA7B,EAAqC;AACnC,iBAAO+H,iBAAiB,CAAC1B,MAAzB;AACD;;AAED,YAAI,KAAK/B,KAAL,CAAWvB,gBAAX,IAA+B,KAAKuB,KAAL,CAAWvB,gBAAX,CAA4Ba,SAAS,CAACU,KAAV,CAAgBzC,IAA5C,CAAnC,EAAsF;AACpF,iBAAO,OAAO,KAAKyC,KAAL,CAAWvB,gBAAX,CAA4Ba,SAAS,CAACU,KAAV,CAAgBzC,IAA5C,CAAP,KAA6D,QAA7D,GAAwE,CAAC,KAAKyC,KAAL,CAAWvB,gBAAX,CAA4Ba,SAAS,CAACU,KAAV,CAAgBzC,IAA5C,CAAD,CAAxE,GAA8H,KAAKyC,KAAL,CAAWvB,gBAAX,CAA4Ba,SAAS,CAACU,KAAV,CAAgBzC,IAA5C,CAArI;AACD;;AAED,YAAI+F,UAAJ,EAAgB;AACd,cAAIC,KAAK,GAAG9E,gBAAgB,CAACmF,eAAe,CAACG,OAAhB,CAAwB,CAAxB,CAAD,CAA5B;AACA,iBAAOR,KAAK,GAAG,CAACA,KAAD,CAAH,GAAa,IAAzB;AACD;;AAED,YAAIE,iBAAiB,CAACK,MAAlB,CAAyBpI,MAA7B,EAAqC;AACnC,iBAAO+H,iBAAiB,CAACK,MAAlB,CAAyB/D,GAAzB,CAA6B,UAAU+D,MAAV,EAAkB;AACpD,mBAAOrF,gBAAgB,CAACqF,MAAD,CAAhB,GAA2BrF,gBAAgB,CAACqF,MAAD,CAA3C,GAAsDN,eAA7D;AACD,WAFM,EAEJQ,MAFI,CAEG,UAAUC,CAAV,EAAaC,GAAb,EAAkBC,GAAlB,EAAuB;AAC/B;AACA,mBAAOA,GAAG,CAAC5H,OAAJ,CAAY0H,CAAZ,MAAmBC,GAA1B;AACD,WALM,CAAP;AAMD;AACF,OA3BM,CA2BLnI,IA3BK,CA2BA,IA3BA;AAHF,KAAP;AAgCD,GApR6B;AAsR9B2H,EAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBnE,KAAlB,EAAyBmC,aAAzB,EAAwC0C,WAAxC,EAAqD;AAE7D,QAAIC,OAAO,GAAG;AACZtC,MAAAA,MAAM,EAAE,EADI;AAEZ+B,MAAAA,MAAM,EAAE,EAFI;AAGZC,MAAAA,OAAO,EAAE;AAHG,KAAd;;AAKA,QAAI1I,MAAM,CAACiB,IAAP,CAAY8H,WAAZ,EAAyB1I,MAA7B,EAAqC;AACnCL,MAAAA,MAAM,CAACiB,IAAP,CAAY8H,WAAZ,EAAyBxC,OAAzB,CAAiC,UAAU0C,gBAAV,EAA4B;AAE3D,YAAI1H,eAAe,CAAC0H,gBAAD,CAAf,IAAqC,OAAOF,WAAW,CAACE,gBAAD,CAAlB,KAAyC,UAAlF,EAA8F;AAC5F,gBAAM,IAAI3B,KAAJ,CAAU,gEAAgE2B,gBAA1E,CAAN;AACD;;AAED,YAAI,CAAC1H,eAAe,CAAC0H,gBAAD,CAAhB,IAAsC,OAAOF,WAAW,CAACE,gBAAD,CAAlB,KAAyC,UAAnF,EAA+F;AAC7F,gBAAM,IAAI3B,KAAJ,CAAU,+CAA+C2B,gBAAzD,CAAN;AACD;;AAED,YAAI,OAAOF,WAAW,CAACE,gBAAD,CAAlB,KAAyC,UAA7C,EAAyD;AACvD,cAAIlB,UAAU,GAAGgB,WAAW,CAACE,gBAAD,CAAX,CAA8B5C,aAA9B,EAA6CnC,KAA7C,CAAjB;;AACA,cAAI,OAAO6D,UAAP,KAAsB,QAA1B,EAAoC;AAClCiB,YAAAA,OAAO,CAACtC,MAAR,CAAewC,IAAf,CAAoBnB,UAApB;AACAiB,YAAAA,OAAO,CAACP,MAAR,CAAeS,IAAf,CAAoBD,gBAApB;AACD,WAHD,MAGO,IAAI,CAAClB,UAAL,EAAiB;AACtBiB,YAAAA,OAAO,CAACP,MAAR,CAAeS,IAAf,CAAoBD,gBAApB;AACD;;AACD;AACD,SATD,MASO,IAAI,OAAOF,WAAW,CAACE,gBAAD,CAAlB,KAAyC,UAA7C,EAAyD;AAC9D,cAAIlB,UAAU,GAAGxG,eAAe,CAAC0H,gBAAD,CAAf,CAAkC5C,aAAlC,EAAiDnC,KAAjD,EAAwD6E,WAAW,CAACE,gBAAD,CAAnE,CAAjB;;AACA,cAAI,OAAOlB,UAAP,KAAsB,QAA1B,EAAoC;AAClCiB,YAAAA,OAAO,CAACtC,MAAR,CAAewC,IAAf,CAAoBnB,UAApB;AACAiB,YAAAA,OAAO,CAACP,MAAR,CAAeS,IAAf,CAAoBD,gBAApB;AACD,WAHD,MAGO,IAAI,CAAClB,UAAL,EAAiB;AACtBiB,YAAAA,OAAO,CAACP,MAAR,CAAeS,IAAf,CAAoBD,gBAApB;AACD,WAFM,MAEA;AACLD,YAAAA,OAAO,CAACN,OAAR,CAAgBQ,IAAhB,CAAqBD,gBAArB;AACD;;AACD;AACD;;AAED,eAAOD,OAAO,CAACN,OAAR,CAAgBQ,IAAhB,CAAqBD,gBAArB,CAAP;AACD,OAjCD;AAkCD;;AAED,WAAOD,OAAP;AACD,GAnU6B;AAqU9B;AACA;AACAzE,EAAAA,YAAY,EAAE,SAASA,YAAT,GAAwB;AACpC,QAAI4E,MAAM,GAAG,IAAb,CADoC,CAGpC;AACA;;;AACA,QAAIC,oBAAoB,GAAG,YAAY;AACrC,UAAIC,UAAU,GAAG,KAAKhF,MAAL,CAAYiF,KAAZ,CAAkB,UAAUrF,SAAV,EAAqB;AACtD,eAAOA,SAAS,CAACyB,KAAV,CAAgBkB,QAAvB;AACD,OAFgB,CAAjB;AAIA,WAAKE,QAAL,CAAc;AACZtE,QAAAA,OAAO,EAAE6G;AADG,OAAd;;AAIA,UAAIA,UAAJ,EAAgB;AACd,aAAK1E,KAAL,CAAW1B,OAAX;AACD,OAFD,MAEO;AACL,aAAK0B,KAAL,CAAWzB,SAAX;AACD,OAboC,CAerC;;;AACA,WAAK4D,QAAL,CAAc;AACZpE,QAAAA,SAAS,EAAE;AADC,OAAd;AAGD,KAnB0B,CAmBzB6G,IAnByB,CAmBpB,IAnBoB,CAA3B,CALoC,CA0BpC;AACA;;;AACA,SAAKlF,MAAL,CAAYkC,OAAZ,CAAoB,UAAUtC,SAAV,EAAqBmD,KAArB,EAA4B;AAC9C,UAAIW,UAAU,GAAGoB,MAAM,CAAChF,aAAP,CAAqBF,SAArB,CAAjB;;AACA,UAAI8D,UAAU,CAACvF,OAAX,IAAsByB,SAAS,CAACyB,KAAV,CAAgB+B,cAA1C,EAA0D;AACxDM,QAAAA,UAAU,CAACvF,OAAX,GAAqB,KAArB;AACD;;AACDyB,MAAAA,SAAS,CAAC6C,QAAV,CAAmB;AACjBF,QAAAA,QAAQ,EAAEmB,UAAU,CAACvF,OADJ;AAEjBwF,QAAAA,WAAW,EAAED,UAAU,CAACE,UAFP;AAGjBpB,QAAAA,gBAAgB,EAAEkB,UAAU,CAACG,KAHZ;AAIjBT,QAAAA,cAAc,EAAE,CAACM,UAAU,CAACvF,OAAZ,IAAuByB,SAAS,CAACyB,KAAV,CAAgB+B,cAAvC,GAAwDxD,SAAS,CAACyB,KAAV,CAAgB+B,cAAxE,GAAyF;AAJxF,OAAnB,EAKGL,KAAK,KAAK+B,MAAM,CAAC9E,MAAP,CAAchE,MAAd,GAAuB,CAAjC,GAAqC+I,oBAArC,GAA4D,IAL/D;AAMD,KAXD,EA5BoC,CAyCpC;AACA;;AACA,QAAI,CAAC,KAAK/E,MAAL,CAAYhE,MAAb,IAAuB,KAAKmJ,SAAL,EAA3B,EAA6C;AAC3C,WAAK1C,QAAL,CAAc;AACZpE,QAAAA,SAAS,EAAE;AADC,OAAd;AAGD;AACF,GAvX6B;AAyX9B;AACA;AACAkB,EAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBK,SAAtB,EAAiC;AAE7C,QAAI,KAAKI,MAAL,CAAYnD,OAAZ,CAAoB+C,SAApB,MAAmC,CAAC,CAAxC,EAA2C;AACzC,WAAKI,MAAL,CAAY6E,IAAZ,CAAiBjF,SAAjB;AACD;;AAED,SAAKH,QAAL,CAAcG,SAAd;AACD,GAlY6B;AAoY9B;AACA;AACAJ,EAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBI,SAAxB,EAAmC;AACjD,QAAIwF,YAAY,GAAG,KAAKpF,MAAL,CAAYnD,OAAZ,CAAoB+C,SAApB,CAAnB;;AAEA,QAAIwF,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvB,WAAKpF,MAAL,GAAc,KAAKA,MAAL,CAAYqF,KAAZ,CAAkB,CAAlB,EAAqBD,YAArB,EAAmCE,MAAnC,CAA0C,KAAKtF,MAAL,CAAYqF,KAAZ,CAAkBD,YAAY,GAAG,CAAjC,CAA1C,CAAd;AACD;;AAED,SAAKlF,YAAL;AACD,GA9Y6B;AA+Y9BqF,EAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,QAAIC,MAAM,GAAG,KAAKlF,KAAlB;AACA,QAAIiB,OAAO,GAAGiE,MAAM,CAACjE,OAArB;AACA,QAAIxC,gBAAgB,GAAGyG,MAAM,CAACzG,gBAA9B;AACA,QAAIN,QAAQ,GAAG+G,MAAM,CAAC/G,QAAtB;AACA,QAAIG,OAAO,GAAG4G,MAAM,CAAC5G,OAArB;AACA,QAAIF,aAAa,GAAG8G,MAAM,CAAC9G,aAA3B;AACA,QAAIG,SAAS,GAAG2G,MAAM,CAAC3G,SAAvB;AACA,QAAIF,eAAe,GAAG6G,MAAM,CAAC7G,eAA7B;AACA,QAAIG,QAAQ,GAAG0G,MAAM,CAAC1G,QAAtB;AACA,QAAI6B,KAAK,GAAG6E,MAAM,CAAC7E,KAAnB;AACA,QAAI3B,2BAA2B,GAAGwG,MAAM,CAACxG,2BAAzC;AACA,QAAIT,SAAS,GAAGiH,MAAM,CAACjH,SAAvB;AACA,QAAIC,OAAO,GAAGgH,MAAM,CAAChH,OAArB;;AAEA,QAAIiH,cAAc,GAAG9I,wBAAwB,CAAC6I,MAAD,EAAS,CAAC,SAAD,EAAY,kBAAZ,EAAgC,UAAhC,EAA4C,SAA5C,EAAuD,eAAvD,EAAwE,WAAxE,EAAqF,iBAArF,EAAwG,UAAxG,EAAoH,OAApH,EAA6H,6BAA7H,EAA4J,WAA5J,EAAyK,SAAzK,CAAT,CAA7C;;AAEA,WAAO1I,KAAK,CAAC4I,aAAN,CACL,MADK,EAELhK,QAAQ,CAAC,EAAD,EAAK+J,cAAL,EAAqB;AAAEhH,MAAAA,QAAQ,EAAE,KAAKsC;AAAjB,KAArB,CAFH,EAGL,KAAKT,KAAL,CAAWqF,QAHN,CAAP;AAKD;AAra6B,CAAlB,CAAd;;AAwaA,IAAI,CAAC5I,MAAM,CAAC6I,OAAR,IAAmB,CAAC7I,MAAM,CAAC8I,MAA3B,KAAsC,CAAC9I,MAAM,CAAC+I,MAAR,IAAkB,CAAC/I,MAAM,CAAC+I,MAAP,CAAcC,GAAvE,CAAJ,EAAiF;AAC/EhJ,EAAAA,MAAM,CAACE,MAAP,GAAgBA,MAAhB;AACD;;AAED4I,MAAM,CAACD,OAAP,GAAiB3I,MAAjB","sourcesContent":["'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar React = global.React || require('react');\nvar Formsy = {};\nvar validationRules = require('./validationRules.js');\nvar formDataToObject = require('form-data-to-object');\nvar utils = require('./utils.js');\nvar Mixin = require('./Mixin.js');\nvar HOC = require('./HOC.js');\nvar Decorator = require('./Decorator.js');\nvar options = {};\nvar emptyArray = [];\n\nFormsy.Mixin = Mixin;\nFormsy.HOC = HOC;\nFormsy.Decorator = Decorator;\n\nFormsy.defaults = function (passedOptions) {\n  options = passedOptions;\n};\n\nFormsy.addValidationRule = function (name, func) {\n  validationRules[name] = func;\n};\n\nFormsy.Form = React.createClass({\n  displayName: 'Formsy',\n  getInitialState: function getInitialState() {\n    return {\n      isValid: true,\n      isSubmitting: false,\n      canChange: false\n    };\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      onSuccess: function onSuccess() {},\n      onError: function onError() {},\n      onSubmit: function onSubmit() {},\n      onValidSubmit: function onValidSubmit() {},\n      onInvalidSubmit: function onInvalidSubmit() {},\n      onValid: function onValid() {},\n      onInvalid: function onInvalid() {},\n      onChange: function onChange() {},\n      validationErrors: null,\n      preventExternalInvalidation: false\n    };\n  },\n\n  childContextTypes: {\n    formsy: React.PropTypes.object\n  },\n  getChildContext: function getChildContext() {\n    var _this = this;\n\n    return {\n      formsy: {\n        attachToForm: this.attachToForm,\n        detachFromForm: this.detachFromForm,\n        validate: this.validate,\n        isFormDisabled: this.isFormDisabled,\n        isValidValue: function isValidValue(component, value) {\n          return _this.runValidation(component, value).isValid;\n        }\n      }\n    };\n  },\n\n  // Add a map to store the inputs of the form, a model to store\n  // the values of the form and register child inputs\n  componentWillMount: function componentWillMount() {\n    this.inputs = [];\n  },\n\n  componentDidMount: function componentDidMount() {\n    this.validateForm();\n  },\n\n  componentWillUpdate: function componentWillUpdate() {\n    // Keep a reference to input names before form updates,\n    // to check if inputs has changed after render\n    this.prevInputNames = this.inputs.map(function (component) {\n      return component.props.name;\n    });\n  },\n\n  componentDidUpdate: function componentDidUpdate() {\n\n    if (this.props.validationErrors && _typeof(this.props.validationErrors) === 'object' && Object.keys(this.props.validationErrors).length > 0) {\n      this.setInputValidationErrors(this.props.validationErrors);\n    }\n\n    var newInputNames = this.inputs.map(function (component) {\n      return component.props.name;\n    });\n    if (utils.arraysDiffer(this.prevInputNames, newInputNames)) {\n      this.validateForm();\n    }\n  },\n\n  // Allow resetting to specified data\n  reset: function reset(data) {\n    this.setFormPristine(true);\n    this.resetModel(data);\n  },\n\n  // Update model, submit to url prop and send the model\n  submit: function submit(event) {\n\n    event && event.preventDefault();\n\n    // Trigger form as not pristine.\n    // If any inputs have not been touched yet this will make them dirty\n    // so validation becomes visible (if based on isPristine)\n    this.setFormPristine(false);\n    var model = this.getModel();\n    this.props.onSubmit(model, this.resetModel, this.updateInputsWithError);\n    this.state.isValid ? this.props.onValidSubmit(model, this.resetModel, this.updateInputsWithError) : this.props.onInvalidSubmit(model, this.resetModel, this.updateInputsWithError);\n  },\n\n  mapModel: function mapModel(model) {\n\n    if (this.props.mapping) {\n      return this.props.mapping(model);\n    } else {\n      return formDataToObject.toObj(Object.keys(model).reduce(function (mappedModel, key) {\n\n        var keyArray = key.split('.');\n        var base = mappedModel;\n        while (keyArray.length) {\n          var currentKey = keyArray.shift();\n          base = base[currentKey] = keyArray.length ? base[currentKey] || {} : model[key];\n        }\n\n        return mappedModel;\n      }, {}));\n    }\n  },\n\n  getModel: function getModel() {\n    var currentValues = this.getCurrentValues();\n    return this.mapModel(currentValues);\n  },\n\n  // Reset each key in the model to the original / initial / specified value\n  resetModel: function resetModel(data) {\n    this.inputs.forEach(function (component) {\n      var name = component.props.name;\n      if (data && data.hasOwnProperty(name)) {\n        component.setValue(data[name]);\n      } else {\n        component.resetValue();\n      }\n    });\n    this.validateForm();\n  },\n\n  setInputValidationErrors: function setInputValidationErrors(errors) {\n    this.inputs.forEach(function (component) {\n      var name = component.props.name;\n      var args = [{\n        _isValid: !(name in errors),\n        _validationError: typeof errors[name] === 'string' ? [errors[name]] : errors[name]\n      }];\n      component.setState.apply(component, args);\n    });\n  },\n\n  // Checks if the values have changed from their initial value\n  isChanged: function isChanged() {\n    return !utils.isSame(this.getPristineValues(), this.getCurrentValues());\n  },\n\n  getPristineValues: function getPristineValues() {\n    return this.inputs.reduce(function (data, component) {\n      var name = component.props.name;\n      data[name] = component.props.value;\n      return data;\n    }, {});\n  },\n\n  // Go through errors from server and grab the components\n  // stored in the inputs map. Change their state to invalid\n  // and set the serverError message\n  updateInputsWithError: function updateInputsWithError(errors) {\n    var _this2 = this;\n\n    Object.keys(errors).forEach(function (name, index) {\n      var component = utils.find(_this2.inputs, function (component) {\n        return component.props.name === name;\n      });\n      if (!component) {\n        throw new Error('You are trying to update an input that does not exist. ' + 'Verify errors object with input names. ' + JSON.stringify(errors));\n      }\n      var args = [{\n        _isValid: _this2.props.preventExternalInvalidation || false,\n        _externalError: typeof errors[name] === 'string' ? [errors[name]] : errors[name]\n      }];\n      component.setState.apply(component, args);\n    });\n  },\n\n  isFormDisabled: function isFormDisabled() {\n    return this.props.disabled;\n  },\n\n  getCurrentValues: function getCurrentValues() {\n    return this.inputs.reduce(function (data, component) {\n      var name = component.props.name;\n      data[name] = component.state._value;\n      return data;\n    }, {});\n  },\n\n  setFormPristine: function setFormPristine(isPristine) {\n    this.setState({\n      _formSubmitted: !isPristine\n    });\n\n    // Iterate through each component and set it as pristine\n    // or \"dirty\".\n    this.inputs.forEach(function (component, index) {\n      component.setState({\n        _formSubmitted: !isPristine,\n        _isPristine: isPristine\n      });\n    });\n  },\n\n  // Use the binded values and the actual input value to\n  // validate the input and set its state. Then check the\n  // state of the form itself\n  validate: function validate(component) {\n\n    // Trigger onChange\n    if (this.state.canChange) {\n      this.props.onChange(this.getCurrentValues(), this.isChanged());\n    }\n\n    var validation = this.runValidation(component);\n    // Run through the validations, split them up and call\n    // the validator IF there is a value or it is required\n    component.setState({\n      _isValid: validation.isValid,\n      _isRequired: validation.isRequired,\n      _validationError: validation.error,\n      _externalError: null\n    }, this.validateForm);\n  },\n\n  // Checks validation on current value or a passed value\n  runValidation: function runValidation(component, value) {\n\n    var currentValues = this.getCurrentValues();\n    var validationErrors = component.props.validationErrors;\n    var validationError = component.props.validationError;\n    value = arguments.length === 2 ? value : component.state._value;\n\n    var validationResults = this.runRules(value, currentValues, component._validations);\n    var requiredResults = this.runRules(value, currentValues, component._requiredValidations);\n\n    // the component defines an explicit validate function\n    if (typeof component.validate === \"function\") {\n      validationResults.failed = component.validate() ? [] : ['failed'];\n    }\n\n    var isRequired = Object.keys(component._requiredValidations).length ? !!requiredResults.success.length : false;\n    var isValid = !validationResults.failed.length && !(this.props.validationErrors && this.props.validationErrors[component.props.name]);\n\n    return {\n      isRequired: isRequired,\n      isValid: isRequired ? false : isValid,\n      error: function () {\n\n        if (isValid && !isRequired) {\n          return emptyArray;\n        }\n\n        if (validationResults.errors.length) {\n          return validationResults.errors;\n        }\n\n        if (this.props.validationErrors && this.props.validationErrors[component.props.name]) {\n          return typeof this.props.validationErrors[component.props.name] === 'string' ? [this.props.validationErrors[component.props.name]] : this.props.validationErrors[component.props.name];\n        }\n\n        if (isRequired) {\n          var error = validationErrors[requiredResults.success[0]];\n          return error ? [error] : null;\n        }\n\n        if (validationResults.failed.length) {\n          return validationResults.failed.map(function (failed) {\n            return validationErrors[failed] ? validationErrors[failed] : validationError;\n          }).filter(function (x, pos, arr) {\n            // Remove duplicates\n            return arr.indexOf(x) === pos;\n          });\n        }\n      }.call(this)\n    };\n  },\n\n  runRules: function runRules(value, currentValues, validations) {\n\n    var results = {\n      errors: [],\n      failed: [],\n      success: []\n    };\n    if (Object.keys(validations).length) {\n      Object.keys(validations).forEach(function (validationMethod) {\n\n        if (validationRules[validationMethod] && typeof validations[validationMethod] === 'function') {\n          throw new Error('Formsy does not allow you to override default validations: ' + validationMethod);\n        }\n\n        if (!validationRules[validationMethod] && typeof validations[validationMethod] !== 'function') {\n          throw new Error('Formsy does not have the validation rule: ' + validationMethod);\n        }\n\n        if (typeof validations[validationMethod] === 'function') {\n          var validation = validations[validationMethod](currentValues, value);\n          if (typeof validation === 'string') {\n            results.errors.push(validation);\n            results.failed.push(validationMethod);\n          } else if (!validation) {\n            results.failed.push(validationMethod);\n          }\n          return;\n        } else if (typeof validations[validationMethod] !== 'function') {\n          var validation = validationRules[validationMethod](currentValues, value, validations[validationMethod]);\n          if (typeof validation === 'string') {\n            results.errors.push(validation);\n            results.failed.push(validationMethod);\n          } else if (!validation) {\n            results.failed.push(validationMethod);\n          } else {\n            results.success.push(validationMethod);\n          }\n          return;\n        }\n\n        return results.success.push(validationMethod);\n      });\n    }\n\n    return results;\n  },\n\n  // Validate the form by going through all child input components\n  // and check their state\n  validateForm: function validateForm() {\n    var _this3 = this;\n\n    // We need a callback as we are validating all inputs again. This will\n    // run when the last component has set its state\n    var onValidationComplete = function () {\n      var allIsValid = this.inputs.every(function (component) {\n        return component.state._isValid;\n      });\n\n      this.setState({\n        isValid: allIsValid\n      });\n\n      if (allIsValid) {\n        this.props.onValid();\n      } else {\n        this.props.onInvalid();\n      }\n\n      // Tell the form that it can start to trigger change events\n      this.setState({\n        canChange: true\n      });\n    }.bind(this);\n\n    // Run validation again in case affected by other inputs. The\n    // last component validated will run the onValidationComplete callback\n    this.inputs.forEach(function (component, index) {\n      var validation = _this3.runValidation(component);\n      if (validation.isValid && component.state._externalError) {\n        validation.isValid = false;\n      }\n      component.setState({\n        _isValid: validation.isValid,\n        _isRequired: validation.isRequired,\n        _validationError: validation.error,\n        _externalError: !validation.isValid && component.state._externalError ? component.state._externalError : null\n      }, index === _this3.inputs.length - 1 ? onValidationComplete : null);\n    });\n\n    // If there are no inputs, set state where form is ready to trigger\n    // change event. New inputs might be added later\n    if (!this.inputs.length && this.isMounted()) {\n      this.setState({\n        canChange: true\n      });\n    }\n  },\n\n  // Method put on each input component to register\n  // itself to the form\n  attachToForm: function attachToForm(component) {\n\n    if (this.inputs.indexOf(component) === -1) {\n      this.inputs.push(component);\n    }\n\n    this.validate(component);\n  },\n\n  // Method put on each input component to unregister\n  // itself from the form\n  detachFromForm: function detachFromForm(component) {\n    var componentPos = this.inputs.indexOf(component);\n\n    if (componentPos !== -1) {\n      this.inputs = this.inputs.slice(0, componentPos).concat(this.inputs.slice(componentPos + 1));\n    }\n\n    this.validateForm();\n  },\n  render: function render() {\n    var _props = this.props;\n    var mapping = _props.mapping;\n    var validationErrors = _props.validationErrors;\n    var onSubmit = _props.onSubmit;\n    var onValid = _props.onValid;\n    var onValidSubmit = _props.onValidSubmit;\n    var onInvalid = _props.onInvalid;\n    var onInvalidSubmit = _props.onInvalidSubmit;\n    var onChange = _props.onChange;\n    var reset = _props.reset;\n    var preventExternalInvalidation = _props.preventExternalInvalidation;\n    var onSuccess = _props.onSuccess;\n    var onError = _props.onError;\n\n    var nonFormsyProps = _objectWithoutProperties(_props, ['mapping', 'validationErrors', 'onSubmit', 'onValid', 'onValidSubmit', 'onInvalid', 'onInvalidSubmit', 'onChange', 'reset', 'preventExternalInvalidation', 'onSuccess', 'onError']);\n\n    return React.createElement(\n      'form',\n      _extends({}, nonFormsyProps, { onSubmit: this.submit }),\n      this.props.children\n    );\n  }\n});\n\nif (!global.exports && !global.module && (!global.define || !global.define.amd)) {\n  global.Formsy = Formsy;\n}\n\nmodule.exports = Formsy;"]},"metadata":{},"sourceType":"script"}