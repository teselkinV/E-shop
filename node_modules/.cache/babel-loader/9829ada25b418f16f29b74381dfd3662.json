{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertColorToString = convertColorToString;\nexports.convertHexToRGB = convertHexToRGB;\nexports.decomposeColor = decomposeColor;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.emphasize = emphasize;\nexports.fade = fade;\nexports.darken = darken;\nexports.lighten = lighten;\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\n\nfunction clamp(value, min, max) {\n  if (value < min) {\n    return min;\n  }\n\n  if (value > max) {\n    return max;\n  }\n\n  return value;\n}\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of, 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\n\nfunction convertColorToString(color) {\n  var type = color.type;\n  var values = color.values;\n\n  if (type.indexOf('rgb') > -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    for (var i = 0; i < 3; i++) {\n      values[i] = parseInt(values[i]);\n    }\n  }\n\n  var colorString = void 0;\n\n  if (type.indexOf('hsl') > -1) {\n    colorString = color.type + '(' + values[0] + ', ' + values[1] + '%, ' + values[2] + '%';\n  } else {\n    colorString = color.type + '(' + values[0] + ', ' + values[1] + ', ' + values[2];\n  }\n\n  if (values.length === 4) {\n    colorString += ', ' + color.values[3] + ')';\n  } else {\n    colorString += ')';\n  }\n\n  return colorString;\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n *  @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n *  @returns {string} A CSS rgb color string\n */\n\n\nfunction convertHexToRGB(color) {\n  if (color.length === 4) {\n    var extendedColor = '#';\n\n    for (var i = 1; i < color.length; i++) {\n      extendedColor += color.charAt(i) + color.charAt(i);\n    }\n\n    color = extendedColor;\n  }\n\n  var values = {\n    r: parseInt(color.substr(1, 2), 16),\n    g: parseInt(color.substr(3, 2), 16),\n    b: parseInt(color.substr(5, 2), 16)\n  };\n  return 'rgb(' + values.r + ', ' + values.g + ', ' + values.b + ')';\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {{type: string, values: number[]}} A MUI color object\n */\n\n\nfunction decomposeColor(color) {\n  if (color.charAt(0) === '#') {\n    return decomposeColor(convertHexToRGB(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n  return {\n    type: type,\n    values: values\n  };\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21 with 2 digit precision.\n */\n\n\nfunction getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  var contrastRatio = (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n  return Number(contrastRatio.toFixed(2)); // Truncate at two digits\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/WAI/GL/wiki/Relative_luminance\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\n\nfunction getLuminance(color) {\n  color = decomposeColor(color);\n\n  if (color.type.indexOf('rgb') > -1) {\n    var rgb = color.values.map(function (val) {\n      val /= 255; // normalized\n\n      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n    });\n    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3)); // Truncate at 3 digits\n  } else if (color.type.indexOf('hsl') > -1) {\n    return color.values[2] / 100;\n  }\n}\n/**\n * Darken or lighten a colour, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction emphasize(color) {\n  var coefficient = arguments.length <= 1 || arguments[1] === undefined ? 0.15 : arguments[1];\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction fade(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value, 0, 1);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  color.values[3] = value;\n  return convertColorToString(color);\n}\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient, 0, 1);\n\n  if (color.type.indexOf('hsl') > -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') > -1) {\n    for (var i = 0; i < 3; i++) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return convertColorToString(color);\n}\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient, 0, 1);\n\n  if (color.type.indexOf('hsl') > -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') > -1) {\n    for (var i = 0; i < 3; i++) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return convertColorToString(color);\n}","map":{"version":3,"sources":["/Users/vladimir/Desktop/Projects/Ecommerce/e-shop/node_modules/material-ui/utils/colorManipulator.js"],"names":["Object","defineProperty","exports","value","convertColorToString","convertHexToRGB","decomposeColor","getContrastRatio","getLuminance","emphasize","fade","darken","lighten","clamp","min","max","color","type","values","indexOf","i","parseInt","colorString","length","extendedColor","charAt","r","substr","g","b","marker","substring","split","map","parseFloat","foreground","background","lumA","lumB","contrastRatio","Math","Number","toFixed","rgb","val","pow","coefficient","arguments","undefined"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertColorToString = convertColorToString;\nexports.convertHexToRGB = convertHexToRGB;\nexports.decomposeColor = decomposeColor;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.emphasize = emphasize;\nexports.fade = fade;\nexports.darken = darken;\nexports.lighten = lighten;\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value, min, max) {\n  if (value < min) {\n    return min;\n  }\n  if (value > max) {\n    return max;\n  }\n  return value;\n}\n\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of, 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nfunction convertColorToString(color) {\n  var type = color.type;\n  var values = color.values;\n\n\n  if (type.indexOf('rgb') > -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    for (var i = 0; i < 3; i++) {\n      values[i] = parseInt(values[i]);\n    }\n  }\n\n  var colorString = void 0;\n\n  if (type.indexOf('hsl') > -1) {\n    colorString = color.type + '(' + values[0] + ', ' + values[1] + '%, ' + values[2] + '%';\n  } else {\n    colorString = color.type + '(' + values[0] + ', ' + values[1] + ', ' + values[2];\n  }\n\n  if (values.length === 4) {\n    colorString += ', ' + color.values[3] + ')';\n  } else {\n    colorString += ')';\n  }\n\n  return colorString;\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n *  @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n *  @returns {string} A CSS rgb color string\n */\nfunction convertHexToRGB(color) {\n  if (color.length === 4) {\n    var extendedColor = '#';\n    for (var i = 1; i < color.length; i++) {\n      extendedColor += color.charAt(i) + color.charAt(i);\n    }\n    color = extendedColor;\n  }\n\n  var values = {\n    r: parseInt(color.substr(1, 2), 16),\n    g: parseInt(color.substr(3, 2), 16),\n    b: parseInt(color.substr(5, 2), 16)\n  };\n\n  return 'rgb(' + values.r + ', ' + values.g + ', ' + values.b + ')';\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {{type: string, values: number[]}} A MUI color object\n */\nfunction decomposeColor(color) {\n  if (color.charAt(0) === '#') {\n    return decomposeColor(convertHexToRGB(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n\n  return { type: type, values: values };\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21 with 2 digit precision.\n */\nfunction getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  var contrastRatio = (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n\n  return Number(contrastRatio.toFixed(2)); // Truncate at two digits\n}\n\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/WAI/GL/wiki/Relative_luminance\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nfunction getLuminance(color) {\n  color = decomposeColor(color);\n\n  if (color.type.indexOf('rgb') > -1) {\n    var rgb = color.values.map(function (val) {\n      val /= 255; // normalized\n      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n    });\n    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3)); // Truncate at 3 digits\n  } else if (color.type.indexOf('hsl') > -1) {\n    return color.values[2] / 100;\n  }\n}\n\n/**\n * Darken or lighten a colour, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction emphasize(color) {\n  var coefficient = arguments.length <= 1 || arguments[1] === undefined ? 0.15 : arguments[1];\n\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction fade(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value, 0, 1);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  color.values[3] = value;\n\n  return convertColorToString(color);\n}\n\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient, 0, 1);\n\n  if (color.type.indexOf('hsl') > -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') > -1) {\n    for (var i = 0; i < 3; i++) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return convertColorToString(color);\n}\n\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient, 0, 1);\n\n  if (color.type.indexOf('hsl') > -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') > -1) {\n    for (var i = 0; i < 3; i++) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return convertColorToString(color);\n}"]},"metadata":{},"sourceType":"script"}